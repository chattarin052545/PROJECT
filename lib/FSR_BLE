import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';

void main() {
  runApp(const FlutterBLEApp());
}

class FlutterBLEApp extends StatelessWidget {
  const FlutterBLEApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter BLE App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const BLEScanScreen(),
    );
  }
}

class BLEScanScreen extends StatefulWidget {
  const BLEScanScreen({Key? key}) : super(key: key);

  @override
  _BLEScanScreenState createState() => _BLEScanScreenState();
}

class _BLEScanScreenState extends State<BLEScanScreen> {
  late StreamSubscription<List<ScanResult>> _scanSubscription;
  List<ScanResult> scanResults = [];

  @override
  void initState() {
    super.initState();
    FlutterBluePlus.startScan(timeout: const Duration(seconds: 4));
    _scanSubscription = FlutterBluePlus.scanResults.listen((results) {
      setState(() {
        scanResults = results;
      });
    });
  }

  @override
  void dispose() {
    _scanSubscription.cancel();
    FlutterBluePlus.stopScan();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Scan BLE Devices')),
      body: ListView.builder(
        itemCount: scanResults.length,
        itemBuilder: (context, index) {
          var result = scanResults[index];
          return ListTile(
            title: Text(result.device.name.isNotEmpty
                ? result.device.name
                : "Unknown Device"),
            subtitle: Text(result.device.id.toString()),
            trailing: ElevatedButton(
              onPressed: () async {
                await result.device.connect();
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) =>
                        BLEControlScreen(device: result.device),
                  ),
                );
              },
              child: const Text('Connect'),
            ),
          );
        },
      ),
    );
  }
}

class BLEControlScreen extends StatefulWidget {
  final BluetoothDevice device;

  const BLEControlScreen({Key? key, required this.device}) : super(key: key);

  @override
  _BLEControlScreenState createState() => _BLEControlScreenState();
}

class _BLEControlScreenState extends State<BLEControlScreen> {
  BluetoothCharacteristic? writeCharacteristic;
  BluetoothCharacteristic? notifyCharacteristic;
  StreamSubscription<List<int>>? _notificationSubscription;

  String fsrValue = "N/A";
  String status = "Device stopped";

  @override
  void initState() {
    super.initState();
    _initializeDevice();
  }

  Future<void> _initializeDevice() async {
    var services = await widget.device.discoverServices();
    for (var service in services) {
      for (var characteristic in service.characteristics) {
        if (characteristic.properties.write) {
          writeCharacteristic = characteristic;
        }
        if (characteristic.properties.notify) {
          notifyCharacteristic = characteristic;
          await notifyCharacteristic!.setNotifyValue(true);
          _notificationSubscription =
              notifyCharacteristic!.value.listen((value) {
            setState(() {
              fsrValue = utf8.decode(value);
            });
          });
        }
      }
    }
  }

  Future<void> _sendCommand(String command) async {
    if (writeCharacteristic != null) {
      await writeCharacteristic!.write(utf8.encode(command));
    }
  }

  @override
  void dispose() {
    _notificationSubscription?.cancel();
    widget.device.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Device Control")),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text("FSR Value:", style: TextStyle(fontSize: 18)),
            Text(fsrValue,
                style:
                    const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                await _sendCommand("start");
                setState(() {
                  status = "Device is running";
                });
              },
              child: const Text("Start"),
            ),
            ElevatedButton(
              onPressed: () async {
                await _sendCommand("stop");
                setState(() {
                  status = "Device stopped";
                });
              },
              child: const Text("Stop"),
            ),
            const SizedBox(height: 20),
            const Text("Set Timer:", style: TextStyle(fontSize: 18)),
            Wrap(
              spacing: 10,
              children: [
                ElevatedButton(
                  onPressed: () async => await _sendCommand("15"),
                  child: const Text("15 sec"),
                ),
                ElevatedButton(
                  onPressed: () async => await _sendCommand("30"),
                  child: const Text("30 sec"),
                ),
                ElevatedButton(
                  onPressed: () async => await _sendCommand("60"),
                  child: const Text("60 sec"),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Text(status,
                style: const TextStyle(fontSize: 18, color: Colors.green)),
          ],
        ),
      ),
    );
  }
}
